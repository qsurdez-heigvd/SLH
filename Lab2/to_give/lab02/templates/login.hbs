<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
<nav class="navbar navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">SLH - Laboratoire 2</a>
        <div>
            <a href="/register" class="btn btn-outline-secondary">Register</a>
        </div>
    </div>
</nav>

<div class="container mt-5">
    <h3 class="text-center">Login</h3>
    <form id="login_form" class="mx-auto" style="max-width: 400px;">
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control form-control-sm" id="email" name="email" required>
        </div>
        <button type="button" class="btn btn-primary btn-sm w-100" onclick="startLogin()">Login</button>
    </form>

    <div class="text-center mt-3">
        <a href="/recover" class="text-muted">Lost your passkey?</a>
    </div>
</div>

<script>
    async function startLogin() {
        const email = document.getElementById("email").value;

        try {
            const response = await fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email })
            });

            if (!response.ok) {
                throw new Error(await response.text());
            }

            const data = await response.json();
            const publicKey = data.publicKey;

            if (publicKey.allowCredentials) {
                publicKey.allowCredentials = publicKey.allowCredentials.map((cred) => ({
                    ...cred,
                    id: Uint8Array.from(atob(cred.id.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0))
                }));
            }

            publicKey.challenge = Uint8Array.from(atob(publicKey.challenge.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0));

            const assertion = await navigator.credentials.get({ publicKey });

            const loginResponse = await fetch('/login/complete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email,
                    response: {
                        id: assertion.id,
                        rawId: Array.from(new Uint8Array(assertion.rawId)),
                        response: {
                            clientDataJSON: Array.from(new Uint8Array(assertion.response.clientDataJSON)),
                            authenticatorData: Array.from(new Uint8Array(assertion.response.authenticatorData)),
                            signature: Array.from(new Uint8Array(assertion.response.signature)),
                            userHandle: assertion.response.userHandle ? Array.from(new Uint8Array(assertion.response.userHandle)) : null,
                        },
                        type: assertion.type,
                    },
                    state_id: data.state_id,
                })
            });

            if (loginResponse.ok) {
                window.location.href = "/home";
            } else {
                alert('Login failed.');
            }
        } catch (error) {
            alert("Failed to authenticate. Ensure you're using localhost or HTTPS.");
        }
    }
</script>

</body>
</html>
